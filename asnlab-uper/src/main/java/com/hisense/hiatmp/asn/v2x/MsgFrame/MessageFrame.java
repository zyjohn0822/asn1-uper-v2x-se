/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "MsgFrame"
 */
package com.hisense.hiatmp.asn.v2x.MsgFrame;

import org.asnlab.asndt.runtime.conv.AnnotationChoiceConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.ChoiceConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.annotation.Alternative;
import org.asnlab.asndt.runtime.type.AsnType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class MessageFrame {

    public static final int bsmFrameChosen = 0;
    public static final int mapFrameChosen = 1;
    public static final int rsmFrameChosen = 2;
    public static final int spatFrameChosen = 3;
    public static final int rsiFrameChosen = 4;
    public final static AsnType TYPE = MsgFrame.type(131234);
    public final static ChoiceConverter CONV;

    static {
        CONV = new AnnotationChoiceConverter(MessageFrame.class);
        AsnConverter bsmFrameConverter = BasicSafetyMessage.CONV;
        AsnConverter mapFrameConverter = MapData.CONV;
        AsnConverter rsmFrameConverter = RoadsideSafetyMessage.CONV;
        AsnConverter spatFrameConverter = SPAT.CONV;
        AsnConverter rsiFrameConverter = RoadSideInformation.CONV;
        CONV.setAlternativeConverters(new AsnConverter[]{bsmFrameConverter, mapFrameConverter, rsmFrameConverter, spatFrameConverter, rsiFrameConverter});
    }

    public final int choiceID;
    @Alternative(0)
    public final BasicSafetyMessage bsmFrame;
    @Alternative(1)
    public final MapData mapFrame;
    @Alternative(2)
    public final RoadsideSafetyMessage rsmFrame;
    @Alternative(3)
    public final SPAT spatFrame;
    @Alternative(4)
    public final RoadSideInformation rsiFrame;

    private MessageFrame(int choiceID, BasicSafetyMessage bsmFrame, MapData mapFrame, RoadsideSafetyMessage rsmFrame, SPAT spatFrame, RoadSideInformation rsiFrame) {
        this.choiceID = choiceID;
        this.bsmFrame = bsmFrame;
        this.mapFrame = mapFrame;
        this.rsmFrame = rsmFrame;
        this.spatFrame = spatFrame;
        this.rsiFrame = rsiFrame;
    }

    public static MessageFrame bsmFrame(BasicSafetyMessage bsmFrame) {
        return new MessageFrame(bsmFrameChosen, bsmFrame, null, null, null, null);
    }

    public static MessageFrame mapFrame(MapData mapFrame) {
        return new MessageFrame(mapFrameChosen, null, mapFrame, null, null, null);
    }

    public static MessageFrame rsmFrame(RoadsideSafetyMessage rsmFrame) {
        return new MessageFrame(rsmFrameChosen, null, null, rsmFrame, null, null);
    }

    public static MessageFrame spatFrame(SPAT spatFrame) {
        return new MessageFrame(spatFrameChosen, null, null, null, spatFrame, null);
    }

    public static MessageFrame rsiFrame(RoadSideInformation rsiFrame) {
        return new MessageFrame(rsiFrameChosen, null, null, null, null, rsiFrame);
    }

    public static MessageFrame ber_decode(InputStream in) throws IOException {
        return (MessageFrame) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static MessageFrame per_decode(boolean align, InputStream in) throws IOException {
        return (MessageFrame) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof MessageFrame)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }


}
