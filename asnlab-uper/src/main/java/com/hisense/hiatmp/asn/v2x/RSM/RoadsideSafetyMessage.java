/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "RSM"
 */
package com.hisense.hiatmp.asn.v2x.RSM;

import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.Component;
import org.asnlab.asndt.runtime.type.AsnType;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;

public class RoadsideSafetyMessage {

    public final static AsnType TYPE = RSM.type(65591);
    public final static CompositeConverter CONV;

    static {
        CONV = new AnnotationCompositeConverter(RoadsideSafetyMessage.class);
        AsnConverter msgCntConverter = MsgCount.CONV;
        AsnConverter idConverter = OctetStringConverter.INSTANCE;
        AsnConverter refPosConverter = Position3D.CONV;
        AsnConverter participantsConverter = ParticipantList.CONV;
        CONV.setComponentConverters(new AsnConverter[]{msgCntConverter, idConverter, refPosConverter, participantsConverter});
    }

    @NotNull
    @Component(0)
    public Integer msgCnt;
    @NotNull
    @Size(min = 8, max = 8)
    @Component(1)
    public byte[] id;
    @NotNull
    @Component(2)
    public Position3D refPos;
    @NotNull
    @Component(3)
    public Vector<ParticipantData> participants;

    public static RoadsideSafetyMessage ber_decode(InputStream in) throws IOException {
        return (RoadsideSafetyMessage) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static RoadsideSafetyMessage per_decode(boolean align, InputStream in) throws IOException {
        return (RoadsideSafetyMessage) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    public boolean equals(Object obj) {
        if (!(obj instanceof RoadsideSafetyMessage)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }


}
