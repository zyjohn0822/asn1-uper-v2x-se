/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "DefTime"
 */
package com.hisense.hiatmp.asn.v2x.SignalPhaseAndTiming;

import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.ReflectionEnumeratedConverter;
import org.asnlab.asndt.runtime.type.AsnType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public enum TimeConfidence {
    unavailable(0),
    time_100_000(1),
    time_050_000(2),
    time_020_000(3),
    time_010_000(4),
    time_002_000(5),
    time_001_000(6),
    time_000_500(7),
    time_000_200(8),
    time_000_100(9),
    time_000_050(10),
    time_000_020(11),
    time_000_010(12),
    time_000_005(13),
    time_000_002(14),
    time_000_001(15),
    time_000_000_5(16),
    time_000_000_2(17),
    time_000_000_1(18),
    time_000_000_05(19),
    time_000_000_02(20),
    time_000_000_01(21),
    time_000_000_005(22),
    time_000_000_002(23),
    time_000_000_001(24),
    time_000_000_000_5(25),
    time_000_000_000_2(26),
    time_000_000_000_1(27),
    time_000_000_000_05(28),
    time_000_000_000_02(29),
    time_000_000_000_01(30),
    time_000_000_000_005(31),
    time_000_000_000_002(32),
    time_000_000_000_001(33),
    time_000_000_000_000_5(34),
    time_000_000_000_000_2(35),
    time_000_000_000_000_1(36),
    time_000_000_000_000_05(37),
    time_000_000_000_000_02(38),
    time_000_000_000_000_01(39);

    public final static AsnType TYPE = SignalPhaseAndTiming.type(131083);
    public final static AsnConverter CONV;

    static {
        CONV = new ReflectionEnumeratedConverter(TimeConfidence.class);
    }

    private int value;

    private TimeConfidence(int value) {
        this.value = value;
    }

    public static TimeConfidence valueOf(int value) {
        TimeConfidence[] values = values();
        for (int i = 0; i < values.length; i++) {
            if (values[i].value == value) {
                return values[i];
            }
        }
        throw new IllegalArgumentException("No enum const value for " + value);
    }

    public static TimeConfidence ber_decode(InputStream in) throws IOException {
        return (TimeConfidence) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static TimeConfidence per_decode(boolean align, InputStream in) throws IOException {
        return (TimeConfidence) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    public int value() {
        return value;
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }


}
