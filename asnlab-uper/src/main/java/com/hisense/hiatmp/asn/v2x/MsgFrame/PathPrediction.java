/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "VehSafetyExt"
 */
package com.hisense.hiatmp.asn.v2x.MsgFrame;

import org.asnlab.asndt.runtime.conv.AnnotationCompositeConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.CompositeConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.annotation.Component;
import org.asnlab.asndt.runtime.type.AsnType;

import javax.validation.constraints.NotNull;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * @author zhangyong
 */
public class PathPrediction {

    public final static AsnType TYPE = MsgFrame.type(720977);
    public final static CompositeConverter CONV;

    static {
        CONV = new AnnotationCompositeConverter(PathPrediction.class);
        AsnConverter radiusOfCurveConverter = RadiusOfCurvature.CONV;
        AsnConverter confidenceConverter = Confidence.CONV;
        CONV.setComponentConverters(new AsnConverter[]{radiusOfCurveConverter, confidenceConverter});
    }

    @NotNull
    @Component(0)
    public Integer radiusOfCurve;
    @NotNull
    @Component(1)
    public Integer confidence;

    public static PathPrediction ber_decode(InputStream in) throws IOException {
        return (PathPrediction) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static PathPrediction per_decode(boolean align, InputStream in) throws IOException {
        return (PathPrediction) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof PathPrediction)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("{");
        sb.append("\"radiusOfCurve\":")
                .append(radiusOfCurve);
        sb.append(",\"confidence\":")
                .append(confidence);
        sb.append('}');
        return sb.toString();
    }
}
