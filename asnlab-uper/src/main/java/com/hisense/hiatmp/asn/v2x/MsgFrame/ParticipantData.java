/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "RSM"
 */
package com.hisense.hiatmp.asn.v2x.MsgFrame;

import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.Component;
import org.asnlab.asndt.runtime.type.AsnType;

import javax.validation.constraints.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;

/**
 * @author zhangyong
 */
public class ParticipantData {

    public final static AsnType TYPE = MsgFrame.type(1376384);
    public final static CompositeConverter CONV;

    static {
        CONV = new AnnotationCompositeConverter(ParticipantData.class);
        AsnConverter ptcTypeConverter = ParticipantType.CONV;
        AsnConverter ptcIdConverter = IntegerConverter.INSTANCE;
        AsnConverter sourceConverter = SourceType.CONV;
        AsnConverter idConverter = OctetStringConverter.INSTANCE;
        AsnConverter secMarkConverter = DSecond.CONV;
        AsnConverter posConverter = PositionOffsetLLV.CONV;
        AsnConverter posConfidenceConverter = PositionConfidenceSet.CONV;
        AsnConverter transmissionConverter = TransmissionState.CONV;
        AsnConverter speedConverter = Speed.CONV;
        AsnConverter headingConverter = Heading.CONV;
        AsnConverter angleConverter = SteeringWheelAngle.CONV;
        AsnConverter motionCfdConverter = MotionConfidenceSet.CONV;
        AsnConverter accelSetConverter = AccelerationSet4Way.CONV;
        AsnConverter sizeConverter = VehicleSize.CONV;
        AsnConverter vehicleClassConverter = VehicleClassification.CONV;
        CONV.setComponentConverters(new AsnConverter[]{ptcTypeConverter, ptcIdConverter, sourceConverter, idConverter, secMarkConverter, posConverter, posConfidenceConverter, transmissionConverter, speedConverter, headingConverter, angleConverter, motionCfdConverter, accelSetConverter, sizeConverter, vehicleClassConverter});
    }

    @NotNull
    @Component(0)
    public ParticipantType ptcType;
    @NotNull
    @Min(0L)
    @Max(65535L)
    @Component(1)
    public Integer ptcId;
    @NotNull
    @Component(2)
    public SourceType source;
    /**
     * OPTIONAL
     */
    @Null
    @Size(min = 8, max = 8)
    @Component(3)
    public byte[] id;
    @NotNull
    @Component(4)
    public Integer secMark;
    @NotNull
    @Component(5)
    public PositionOffsetLLV pos;
    @NotNull
    @Component(6)
    public PositionConfidenceSet posConfidence;
    /**
     * OPTIONAL
     */
    @Null
    @Component(7)
    public TransmissionState transmission;
    @NotNull
    @Component(8)
    public Integer speed;
    @NotNull
    @Component(9)
    public Integer heading;
    /**
     * OPTIONAL
     */
    @Null
    @Component(10)
    public Integer angle;
    /**
     * OPTIONAL
     */
    @Null
    @Component(11)
    public MotionConfidenceSet motionCfd;
    /**
     * OPTIONAL
     */
    @Null
    @Component(12)
    public AccelerationSet4Way accelSet;
    @NotNull
    @Component(13)
    public VehicleSize size;
    /**
     * OPTIONAL
     */
    @Null
    @Component(14)
    public VehicleClassification vehicleClass;

    public static ParticipantData ber_decode(InputStream in) throws IOException {
        return (ParticipantData) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static ParticipantData per_decode(boolean align, InputStream in) throws IOException {
        return (ParticipantData) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ParticipantData)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("{");
        sb.append("\"ptcType\":")
                .append(ptcType);
        sb.append(",\"ptcId\":")
                .append(ptcId);
        sb.append(",\"source\":")
                .append(source);
        sb.append(",\"id\":")
                .append(Arrays.toString(id));
        sb.append(",\"secMark\":")
                .append(secMark);
        sb.append(",\"pos\":")
                .append(pos);
        sb.append(",\"posConfidence\":")
                .append(posConfidence);
        sb.append(",\"transmission\":")
                .append(transmission);
        sb.append(",\"speed\":")
                .append(speed);
        sb.append(",\"heading\":")
                .append(heading);
        sb.append(",\"angle\":")
                .append(angle);
        sb.append(",\"motionCfd\":")
                .append(motionCfd);
        sb.append(",\"accelSet\":")
                .append(accelSet);
        sb.append(",\"size\":")
                .append(size);
        sb.append(",\"vehicleClass\":")
                .append(vehicleClass);
        sb.append('}');
        return sb.toString();
    }
}
