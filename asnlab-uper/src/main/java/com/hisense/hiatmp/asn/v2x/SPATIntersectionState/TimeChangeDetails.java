/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "SPATIntersectionState"
 */
package com.hisense.hiatmp.asn.v2x.SPATIntersectionState;

import org.asnlab.asndt.runtime.conv.AnnotationChoiceConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.ChoiceConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.annotation.Alternative;
import org.asnlab.asndt.runtime.type.AsnType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class TimeChangeDetails {

    public static final int countingChosen = 0;
    public static final int utcTimingChosen = 1;
    public final static AsnType TYPE = SPATIntersectionState.type(65544);
    public final static ChoiceConverter CONV;

    static {
        CONV = new AnnotationChoiceConverter(TimeChangeDetails.class);
        AsnConverter countingConverter = TimeCountingDown.CONV;
        AsnConverter utcTimingConverter = UTCTiming.CONV;
        CONV.setAlternativeConverters(new AsnConverter[]{countingConverter, utcTimingConverter});
    }

    public final int choiceID;
    @Alternative(0)
    public final TimeCountingDown counting;
    @Alternative(1)
    public final UTCTiming utcTiming;

    private TimeChangeDetails(int choiceID, TimeCountingDown counting, UTCTiming utcTiming) {
        this.choiceID = choiceID;
        this.counting = counting;
        this.utcTiming = utcTiming;
    }

    public static TimeChangeDetails counting(TimeCountingDown counting) {
        return new TimeChangeDetails(countingChosen, counting, null);
    }

    public static TimeChangeDetails utcTiming(UTCTiming utcTiming) {
        return new TimeChangeDetails(utcTimingChosen, null, utcTiming);
    }

    public static TimeChangeDetails ber_decode(InputStream in) throws IOException {
        return (TimeChangeDetails) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static TimeChangeDetails per_decode(boolean align, InputStream in) throws IOException {
        return (TimeChangeDetails) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    public boolean equals(Object obj) {
        if (!(obj instanceof TimeChangeDetails)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }


}
