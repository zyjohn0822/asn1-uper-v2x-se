/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "DefPositionOffset"
 */
package com.hisense.hiatmp.asn.v2x.MapLane;

import org.asnlab.asndt.runtime.conv.AnnotationChoiceConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.ChoiceConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.annotation.Alternative;
import org.asnlab.asndt.runtime.type.AsnType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class PositionOffsetLL {

    public static final int position_LL1Chosen = 0;
    public static final int position_LL2Chosen = 1;
    public static final int position_LL3Chosen = 2;
    public static final int position_LL4Chosen = 3;
    public static final int position_LL5Chosen = 4;
    public static final int position_LL6Chosen = 5;
    public static final int position_LatLonChosen = 6;
    public final static AsnType TYPE = MapLane.type(458781);
    public final static ChoiceConverter CONV;

    static {
        CONV = new AnnotationChoiceConverter(PositionOffsetLL.class);
        AsnConverter position_LL1Converter = Position_LL_24B.CONV;
        AsnConverter position_LL2Converter = Position_LL_28B.CONV;
        AsnConverter position_LL3Converter = Position_LL_32B.CONV;
        AsnConverter position_LL4Converter = Position_LL_36B.CONV;
        AsnConverter position_LL5Converter = Position_LL_44B.CONV;
        AsnConverter position_LL6Converter = Position_LL_48B.CONV;
        AsnConverter position_LatLonConverter = Position_LLmD_64b.CONV;
        CONV.setAlternativeConverters(new AsnConverter[]{position_LL1Converter, position_LL2Converter, position_LL3Converter, position_LL4Converter, position_LL5Converter, position_LL6Converter, position_LatLonConverter});
    }

    public final int choiceID;
    @Alternative(0)
    public final Position_LL_24B position_LL1;
    @Alternative(1)
    public final Position_LL_28B position_LL2;
    @Alternative(2)
    public final Position_LL_32B position_LL3;
    @Alternative(3)
    public final Position_LL_36B position_LL4;
    @Alternative(4)
    public final Position_LL_44B position_LL5;
    @Alternative(5)
    public final Position_LL_48B position_LL6;
    @Alternative(6)
    public final Position_LLmD_64b position_LatLon;

    private PositionOffsetLL(int choiceID, Position_LL_24B position_LL1, Position_LL_28B position_LL2, Position_LL_32B position_LL3, Position_LL_36B position_LL4, Position_LL_44B position_LL5, Position_LL_48B position_LL6, Position_LLmD_64b position_LatLon) {
        this.choiceID = choiceID;
        this.position_LL1 = position_LL1;
        this.position_LL2 = position_LL2;
        this.position_LL3 = position_LL3;
        this.position_LL4 = position_LL4;
        this.position_LL5 = position_LL5;
        this.position_LL6 = position_LL6;
        this.position_LatLon = position_LatLon;
    }

    public static PositionOffsetLL position_LL1(Position_LL_24B position_LL1) {
        return new PositionOffsetLL(position_LL1Chosen, position_LL1, null, null, null, null, null, null);
    }

    public static PositionOffsetLL position_LL2(Position_LL_28B position_LL2) {
        return new PositionOffsetLL(position_LL2Chosen, null, position_LL2, null, null, null, null, null);
    }

    public static PositionOffsetLL position_LL3(Position_LL_32B position_LL3) {
        return new PositionOffsetLL(position_LL3Chosen, null, null, position_LL3, null, null, null, null);
    }

    public static PositionOffsetLL position_LL4(Position_LL_36B position_LL4) {
        return new PositionOffsetLL(position_LL4Chosen, null, null, null, position_LL4, null, null, null);
    }

    public static PositionOffsetLL position_LL5(Position_LL_44B position_LL5) {
        return new PositionOffsetLL(position_LL5Chosen, null, null, null, null, position_LL5, null, null);
    }

    public static PositionOffsetLL position_LL6(Position_LL_48B position_LL6) {
        return new PositionOffsetLL(position_LL6Chosen, null, null, null, null, null, position_LL6, null);
    }

    public static PositionOffsetLL position_LatLon(Position_LLmD_64b position_LatLon) {
        return new PositionOffsetLL(position_LatLonChosen, null, null, null, null, null, null, position_LatLon);
    }

    public static PositionOffsetLL ber_decode(InputStream in) throws IOException {
        return (PositionOffsetLL) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static PositionOffsetLL per_decode(boolean align, InputStream in) throws IOException {
        return (PositionOffsetLL) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    public boolean equals(Object obj) {
        if (!(obj instanceof PositionOffsetLL)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }


}
