/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "DefPosition"
 */
package com.hisense.hiatmp.asn.v2x.BSM;

import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.ReflectionEnumeratedConverter;
import org.asnlab.asndt.runtime.type.AsnType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public enum ElevationConfidence {
    unavailable(0),
    elev_500_00(1),
    elev_200_00(2),
    elev_100_00(3),
    elev_050_00(4),
    elev_020_00(5),
    elev_010_00(6),
    elev_005_00(7),
    elev_002_00(8),
    elev_001_00(9),
    elev_000_50(10),
    elev_000_20(11),
    elev_000_10(12),
    elev_000_05(13),
    elev_000_02(14),
    elev_000_01(15);

    public final static AsnType TYPE = BSM.type(196622);
    public final static AsnConverter CONV;

    static {
        CONV = new ReflectionEnumeratedConverter(ElevationConfidence.class);
    }

    private int value;

    private ElevationConfidence(int value) {
        this.value = value;
    }

    public static ElevationConfidence valueOf(int value) {
        ElevationConfidence[] values = values();
        for (int i = 0; i < values.length; i++) {
            if (values[i].value == value) {
                return values[i];
            }
        }
        throw new IllegalArgumentException("No enum const value for " + value);
    }

    public static ElevationConfidence ber_decode(InputStream in) throws IOException {
        return (ElevationConfidence) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static ElevationConfidence per_decode(boolean align, InputStream in) throws IOException {
        return (ElevationConfidence) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    public int value() {
        return value;
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }


}
