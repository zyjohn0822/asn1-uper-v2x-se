/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "MapLane"
 */
package com.hisense.hiatmp.asn.v2x.MsgFrame;

import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.ReflectionBitStringConverter;
import org.asnlab.asndt.runtime.type.AsnType;
import org.asnlab.asndt.runtime.value.BitString;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * @author zhangyong
 */
public class LaneAttributes_Barrier extends BitString {

    public static final int median_RevocableLane = 0;
    public static final int median = 1;
    public static final int whiteLineHashing = 2;
    public static final int stripedLines = 3;
    public static final int doubleStripedLines = 4;
    public static final int trafficCones = 5;
    public static final int constructionBarrier = 6;
    public static final int trafficChannels = 7;
    public static final int lowCurbs = 8;
    public static final int highCurbs = 9;
    public final static AsnType TYPE = MsgFrame.type(1179766);
    public final static AsnConverter CONV;

    static {
        CONV = new ReflectionBitStringConverter(LaneAttributes_Barrier.class);
    }

    public LaneAttributes_Barrier(byte[] bytes, byte unusedBits) {
        super(bytes, unusedBits);
    }

    public LaneAttributes_Barrier(int size) {
        super(size);
    }

    public LaneAttributes_Barrier() {
        super(0);
    }

    public static LaneAttributes_Barrier ber_decode(InputStream in) throws IOException {
        return (LaneAttributes_Barrier) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static LaneAttributes_Barrier per_decode(boolean align, InputStream in) throws IOException {
        return (LaneAttributes_Barrier) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    public boolean getMedian_RevocableLane() {
        return getBit(median_RevocableLane);
    }

    public void setMedian_RevocableLane() {
        setBit(median_RevocableLane, true);
    }

    public void clearMedian_RevocableLane() {
        setBit(median_RevocableLane, false);
    }

    public boolean getMedian() {
        return getBit(median);
    }

    public void setMedian() {
        setBit(median, true);
    }

    public void clearMedian() {
        setBit(median, false);
    }

    public boolean getWhiteLineHashing() {
        return getBit(whiteLineHashing);
    }

    public void setWhiteLineHashing() {
        setBit(whiteLineHashing, true);
    }

    public void clearWhiteLineHashing() {
        setBit(whiteLineHashing, false);
    }

    public boolean getStripedLines() {
        return getBit(stripedLines);
    }

    public void setStripedLines() {
        setBit(stripedLines, true);
    }

    public void clearStripedLines() {
        setBit(stripedLines, false);
    }

    public boolean getDoubleStripedLines() {
        return getBit(doubleStripedLines);
    }

    public void setDoubleStripedLines() {
        setBit(doubleStripedLines, true);
    }

    public void clearDoubleStripedLines() {
        setBit(doubleStripedLines, false);
    }

    public boolean getTrafficCones() {
        return getBit(trafficCones);
    }

    public void setTrafficCones() {
        setBit(trafficCones, true);
    }

    public void clearTrafficCones() {
        setBit(trafficCones, false);
    }

    public boolean getConstructionBarrier() {
        return getBit(constructionBarrier);
    }

    public void setConstructionBarrier() {
        setBit(constructionBarrier, true);
    }

    public void clearConstructionBarrier() {
        setBit(constructionBarrier, false);
    }

    public boolean getTrafficChannels() {
        return getBit(trafficChannels);
    }

    public void setTrafficChannels() {
        setBit(trafficChannels, true);
    }

    public void clearTrafficChannels() {
        setBit(trafficChannels, false);
    }

    public boolean getLowCurbs() {
        return getBit(lowCurbs);
    }

    public void setLowCurbs() {
        setBit(lowCurbs, true);
    }

    public void clearLowCurbs() {
        setBit(lowCurbs, false);
    }

    public boolean getHighCurbs() {
        return getBit(highCurbs);
    }

    public void setHighCurbs() {
        setBit(highCurbs, true);
    }

    public void clearHighCurbs() {
        setBit(highCurbs, false);
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof LaneAttributes_Barrier)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }


}
