/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "MapLane"
 */
package com.hisense.hiatmp.asn.v2x.Map;

import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.ReflectionBitStringConverter;
import org.asnlab.asndt.runtime.type.AsnType;
import org.asnlab.asndt.runtime.value.BitString;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class LaneAttributes_Crosswalk extends BitString {

    public static final int crosswalkRevocableLane = 0;
    public static final int bicyleUseAllowed = 1;
    public static final int isXwalkFlyOverLane = 2;
    public static final int fixedCycleTime = 3;
    public static final int biDirectionalCycleTimes = 4;
    public static final int hasPushToWalkButton = 5;
    public static final int audioSupport = 6;
    public static final int rfSignalRequestPresent = 7;
    public static final int unsignalizedSegmentsPresent = 8;
    public final static AsnType TYPE = Map.type(524342);
    public final static AsnConverter CONV;

    static {
        CONV = new ReflectionBitStringConverter(LaneAttributes_Crosswalk.class);
    }

    public LaneAttributes_Crosswalk(byte[] bytes, byte unusedBits) {
        super(bytes, unusedBits);
    }

    public LaneAttributes_Crosswalk(int size) {
        super(size);
    }

    public LaneAttributes_Crosswalk() {
        super(0);
    }

    public static LaneAttributes_Crosswalk ber_decode(InputStream in) throws IOException {
        return (LaneAttributes_Crosswalk) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static LaneAttributes_Crosswalk per_decode(boolean align, InputStream in) throws IOException {
        return (LaneAttributes_Crosswalk) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    public boolean getCrosswalkRevocableLane() {
        return getBit(crosswalkRevocableLane);
    }

    public void setCrosswalkRevocableLane() {
        setBit(crosswalkRevocableLane, true);
    }

    public void clearCrosswalkRevocableLane() {
        setBit(crosswalkRevocableLane, false);
    }

    public boolean getBicyleUseAllowed() {
        return getBit(bicyleUseAllowed);
    }

    public void setBicyleUseAllowed() {
        setBit(bicyleUseAllowed, true);
    }

    public void clearBicyleUseAllowed() {
        setBit(bicyleUseAllowed, false);
    }

    public boolean getIsXwalkFlyOverLane() {
        return getBit(isXwalkFlyOverLane);
    }

    public void setIsXwalkFlyOverLane() {
        setBit(isXwalkFlyOverLane, true);
    }

    public void clearIsXwalkFlyOverLane() {
        setBit(isXwalkFlyOverLane, false);
    }

    public boolean getFixedCycleTime() {
        return getBit(fixedCycleTime);
    }

    public void setFixedCycleTime() {
        setBit(fixedCycleTime, true);
    }

    public void clearFixedCycleTime() {
        setBit(fixedCycleTime, false);
    }

    public boolean getBiDirectionalCycleTimes() {
        return getBit(biDirectionalCycleTimes);
    }

    public void setBiDirectionalCycleTimes() {
        setBit(biDirectionalCycleTimes, true);
    }

    public void clearBiDirectionalCycleTimes() {
        setBit(biDirectionalCycleTimes, false);
    }

    public boolean getHasPushToWalkButton() {
        return getBit(hasPushToWalkButton);
    }

    public void setHasPushToWalkButton() {
        setBit(hasPushToWalkButton, true);
    }

    public void clearHasPushToWalkButton() {
        setBit(hasPushToWalkButton, false);
    }

    public boolean getAudioSupport() {
        return getBit(audioSupport);
    }

    public void setAudioSupport() {
        setBit(audioSupport, true);
    }

    public void clearAudioSupport() {
        setBit(audioSupport, false);
    }

    public boolean getRfSignalRequestPresent() {
        return getBit(rfSignalRequestPresent);
    }

    public void setRfSignalRequestPresent() {
        setBit(rfSignalRequestPresent, true);
    }

    public void clearRfSignalRequestPresent() {
        setBit(rfSignalRequestPresent, false);
    }

    public boolean getUnsignalizedSegmentsPresent() {
        return getBit(unsignalizedSegmentsPresent);
    }

    public void setUnsignalizedSegmentsPresent() {
        setBit(unsignalizedSegmentsPresent, true);
    }

    public void clearUnsignalizedSegmentsPresent() {
        setBit(unsignalizedSegmentsPresent, false);
    }

    public boolean equals(Object obj) {
        if (!(obj instanceof LaneAttributes_Crosswalk)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }


}
