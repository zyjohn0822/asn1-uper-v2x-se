/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "DefPosition"
 */
package com.hisense.hiatmp.asn.v2x.MsgFrame;

import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.ReflectionEnumeratedConverter;
import org.asnlab.asndt.runtime.type.AsnType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * @author zhangyong
 */

public enum PositionConfidence {
    /**
     *
     */
    unavailable(0),
    /**
     *
     */
    a500m(1),
    /**
     *
     */
    a200m(2),
    /**
     *
     */
    a100m(3),
    /**
     *
     */
    a50m(4),
    /**
     *
     */
    a20m(5),
    /**
     *
     */
    a10m(6),
    /**
     *
     */
    a5m(7),
    /**
     *
     */
    a2m(8),
    /**
     *
     */
    a1m(9),
    /**
     *
     */
    a50cm(10),
    /**
     *
     */
    a20cm(11),
    /**
     *
     */
    a10cm(12),
    /**
     *
     */
    a5cm(13),
    /**
     *
     */
    a2cm(14),
    /**
     *
     */
    a1cm(15);

    public final static AsnType TYPE = MsgFrame.type(262158);
    public final static AsnConverter CONV;

    static {
        CONV = new ReflectionEnumeratedConverter(PositionConfidence.class);
    }

    private int value;

    private PositionConfidence(int value) {
        this.value = value;
    }

    public static PositionConfidence valueOf(int value) {
        PositionConfidence[] values = values();
        for (int i = 0; i < values.length; i++) {
            if (values[i].value == value) {
                return values[i];
            }
        }
        throw new IllegalArgumentException("No enum const value for " + value);
    }

    public static PositionConfidence ber_decode(InputStream in) throws IOException {
        return (PositionConfidence) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static PositionConfidence per_decode(boolean align, InputStream in) throws IOException {
        return (PositionConfidence) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    public int value() {
        return value;
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("{");
        sb.append("\"value\":")
                .append(value);
        sb.append('}');
        return sb.toString();
    }
}
