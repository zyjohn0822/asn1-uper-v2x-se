/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "RSI"
 */
package com.hisense.hiatmp.asn.v2x.MsgFrame;

import com.hisense.hiatmp.asn.v2x.AsnV2x;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.Component;
import org.asnlab.asndt.runtime.type.AsnType;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Null;
import javax.validation.constraints.Size;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Vector;

/**
 * @author zhangyong
 */
public class RoadSideInformation implements AsnV2x {

    public final static AsnType TYPE = MsgFrame.type(1507472);
    public final static CompositeConverter CONV;

    static {
        CONV = new AnnotationCompositeConverter(RoadSideInformation.class);
        AsnConverter msgCntConverter = MsgCount.CONV;
        AsnConverter moyConverter = MinuteOfTheYear.CONV;
        AsnConverter idConverter = OctetStringConverter.INSTANCE;
        AsnConverter refPosConverter = Position3D.CONV;
        AsnConverter rtesConverter = RTEList.CONV;
        AsnConverter rtssConverter = RTSList.CONV;
        CONV.setComponentConverters(new AsnConverter[]{msgCntConverter, moyConverter, idConverter, refPosConverter, rtesConverter, rtssConverter});
    }

    @NotNull
    @Component(0)
    public Integer msgCnt;
    /**
     * OPTIONAL
     */
    @Null
    @Component(1)
    public Integer moy;
    @NotNull
    @Size(min = 8, max = 8)
    @Component(2)
    public byte[] id;
    @NotNull
    @Component(3)
    public Position3D refPos;
    /**
     * OPTIONAL
     */
    @Null
    @Component(4)
    public Vector<RTEData> rtes;
    /**
     * OPTIONAL
     */
    @Null
    @Component(5)
    public Vector<RTSData> rtss;

    public static RoadSideInformation ber_decode(InputStream in) throws IOException {
        return (RoadSideInformation) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static RoadSideInformation per_decode(boolean align, InputStream in) throws IOException {
        return (RoadSideInformation) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof RoadSideInformation)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("{");
        sb.append("\"msgCnt\":")
                .append(msgCnt);
        sb.append(",\"moy\":")
                .append(moy);
        sb.append(",\"id\":")
                .append(Arrays.toString(id));
        sb.append(",\"refPos\":")
                .append(refPos);
        sb.append(",\"rtes\":")
                .append(rtes);
        sb.append(",\"rtss\":")
                .append(rtss);
        sb.append('}');
        return sb.toString();
    }
}
