/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "BSM"
 */
package com.hisense.hiatmp.asn.v2x.BSM;

import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.Component;
import org.asnlab.asndt.runtime.type.AsnType;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Null;
import javax.validation.constraints.Size;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * @author zhangyong
 */
public class BasicSafetyMessage {

    public final static AsnType TYPE = BSM.type(852056);
    public final static CompositeConverter CONV;

    static {
        CONV = new AnnotationCompositeConverter(BasicSafetyMessage.class);
        AsnConverter msgCntConverter = MsgCount.CONV;
        AsnConverter idConverter = OctetStringConverter.INSTANCE;
        AsnConverter secMarkConverter = DSecond.CONV;
        AsnConverter timeConfidenceConverter = TimeConfidence.CONV;
        AsnConverter posConverter = Position3D.CONV;
        AsnConverter posAccuracyConverter = PositionalAccuracy.CONV;
        AsnConverter posConfidenceConverter = PositionConfidenceSet.CONV;
        AsnConverter transmissionConverter = TransmissionState.CONV;
        AsnConverter speedConverter = Speed.CONV;
        AsnConverter headingConverter = Heading.CONV;
        AsnConverter angleConverter = SteeringWheelAngle.CONV;
        AsnConverter motionCfdConverter = MotionConfidenceSet.CONV;
        AsnConverter accelSetConverter = AccelerationSet4Way.CONV;
        AsnConverter brakesConverter = BrakeSystemStatus.CONV;
        AsnConverter sizeConverter = VehicleSize.CONV;
        AsnConverter vehicleClassConverter = VehicleClassification.CONV;
        AsnConverter safetyExtConverter = VehicleSafetyExtensions.CONV;
        AsnConverter emergencyExtConverter = VehicleEmergencyExtensions.CONV;
        CONV.setComponentConverters(new AsnConverter[]{msgCntConverter, idConverter, secMarkConverter, timeConfidenceConverter, posConverter, posAccuracyConverter, posConfidenceConverter, transmissionConverter, speedConverter, headingConverter, angleConverter, motionCfdConverter, accelSetConverter, brakesConverter, sizeConverter, vehicleClassConverter, safetyExtConverter, emergencyExtConverter});
    }

    @NotNull
    @Component(0)
    public Integer msgCnt;
    @NotNull
    @Size(min = 8, max = 8)
    @Component(1)
    public byte[] id;
    @NotNull
    @Component(2)
    public Integer secMark;
    @Null
    @Component(3)
    public TimeConfidence timeConfidence;    /* OPTIONAL */
    @NotNull
    @Component(4)
    public Position3D pos;
    @Null
    @Component(5)
    public PositionalAccuracy posAccuracy;    /* OPTIONAL */
    @Null
    @Component(6)
    public PositionConfidenceSet posConfidence;    /* OPTIONAL */
    @NotNull
    @Component(7)
    public TransmissionState transmission;
    @NotNull
    @Component(8)
    public Integer speed;
    @NotNull
    @Component(9)
    public Integer heading;
    @Null
    @Component(10)
    public Integer angle;    /* OPTIONAL */
    @Null
    @Component(11)
    public MotionConfidenceSet motionCfd;    /* OPTIONAL */
    @NotNull
    @Component(12)
    public AccelerationSet4Way accelSet;
    @NotNull
    @Component(13)
    public BrakeSystemStatus brakes;
    @NotNull
    @Component(14)
    public VehicleSize size;
    @NotNull
    @Component(15)
    public VehicleClassification vehicleClass;
    @Null
    @Component(16)
    public VehicleSafetyExtensions safetyExt;    /* OPTIONAL */
    @Null
    @Component(17)
    public VehicleEmergencyExtensions emergencyExt;    /* OPTIONAL */

    public static BasicSafetyMessage ber_decode(InputStream in) throws IOException {
        return (BasicSafetyMessage) TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
    }

    public static BasicSafetyMessage per_decode(boolean align, InputStream in) throws IOException {
        return (BasicSafetyMessage) TYPE.decode(in, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof BasicSafetyMessage)) {
            return false;
        }
        return TYPE.equals(this, obj, CONV);
    }

    public void ber_encode(OutputStream out) throws IOException {
        TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
    }

    public void per_encode(boolean align, OutputStream out) throws IOException {
        TYPE.encode(this, align ? EncodingRules.ALIGNED_PACKED_ENCODING_RULES : EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
    }


}
